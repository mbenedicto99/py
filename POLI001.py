# ESTUDOS ESCOLA POLITECNICA

# Finalidade  : Estudo de Algebra Linear
# Autor       : Marcos de Benendicto (AI)
# Data        : 28/03/2025

"""1. √Ålgebra Linear e Geometria Anal√≠tica
Contexto:
Fundamenta o estudo de espa√ßos vetoriais e transforma√ß√µes lineares, essenciais para modelagem matem√°tica em diversas √°reas, como engenharia, IA e estat√≠stica.
üìò T√≥picos:
Vetores, matrizes
Sistemas lineares
Espa√ßos vetoriais
Produtos interno, norma, ortogonalidade
Geometria no plano e espa√ßo
üõ†Ô∏è Exemplo pr√°tico:
Calcular o trajeto ideal de um drone em um ambiente 3D evitando obst√°culos, utilizando vetores, planos e proje√ß√µes."""

import numpy as np

# Produto escalar
v1 = np.array([1, 2])
v2 = np.array([3, 4])
dot_product = np.dot(v1, v2)  # Resultado: 11

# Produto matricial
A = np.array([[1, 2], [3, 4]])
B = np.array([[2, 0], [1, 2]])
C = np.dot(A, B)

-------------------------------------------------
#2. Decomposi√ß√£o de Valor Singular (SVD)

"""Contexto:
M√©todo de fatora√ß√£o de matrizes √∫til para compress√£o de dados, redu√ß√£o de dimensionalidade e extra√ß√£o de padr√µes.
üõ†Ô∏è Exemplo pr√°tico:
Compress√£o de imagens: reduz a quantidade de dados armazenados preservando a qualidade visual. O JPEG usa SVD."""

# SVD de uma matriz
A = np.array([[1, 2], [3, 4], [5, 6]])
U, S, VT = np.linalg.svd(A)

# Reconstru√ß√£o
S_mat = np.zeros((3, 2))
S_mat[:2, :2] = np.diag(S)
A_reconstructed = U @ S_mat @ VT

-------------------------------------------------
#3. Otimiza√ß√£o (Gradiente Descendente)

"""Contexto:
Busca encontrar o melhor resultado poss√≠vel (m√≠nimo ou m√°ximo) para um determinado problema, com ou sem restri√ß√µes.
üìò T√≥picos:
Derivadas e derivadas parciais
Gradiente, Hessiana, Jacobiano
Algoritmos de gradiente descendente
Problemas convexos e n√£o convexos"""

# Minimizar f(w) = (w - 3)^2
w = 0.0
alpha = 0.1

for i in range(20):
    grad = 2 * (w - 3)
    w = w - alpha * grad

# w converge para 3

-------------------------------------------------
#4. Estat√≠stica Descritiva

"""Contexto:
Analisa e resume dados (descritiva) e realiza infer√™ncias sobre popula√ß√µes com base em amostras (indutiva).
üìò T√≥picos:
M√©dia, mediana, moda
Vari√¢ncia, desvio padr√£o
Gr√°ficos e histogramas
Estima√ß√£o de par√¢metros"""

import pandas as pd

data = [10, 20, 20, 30, 40]
df = pd.Series(data)

media = df.mean()
mediana = df.median()
desvio_padrao = df.std()

-------------------------------------------------
#5. Probabilidade e Teorema de Bayes

"""Avalia incertezas e a chance de ocorr√™ncia de eventos, essencial para an√°lise preditiva.
üìò Teorema de Bayes:
"""

# Teorema de Bayes
P_Dado_Positivo = 0.99
P_Pos = 0.01 * 0.99 + 0.99 * 0.05
P_Doenca_dado_Pos = (0.99 * 0.01) / P_Pos  # Resultado ~0.17

-------------------------------------------------
#6. Modelos de Probabilidade

"""Contexto:
Modelam fen√¥menos aleat√≥rios. Discretos lidam com contagens, cont√≠nuos com medi√ß√µes.
üìò Exemplos:
Discreto: Binomial, Poisson
Cont√≠nuo: Normal, Exponencial
üõ†Ô∏è Exemplo pr√°tico:
Modelar a quantidade de ve√≠culos que chegam por minuto a um ped√°gio (Poisson)."""

from scipy.stats import poisson, norm

# Poisson: probabilidade de 3 carros/min, m√©dia=2
p = poisson.pmf(3, mu=2)

# Normal: probabilidade de X < 1.8, m√©dia=2, desvio=0.5
p_norm = norm.cdf(1.8, loc=2, scale=0.5)

-------------------------------------------------
#7. Intervalo de Confian√ßa e Teste de Hip√≥teses

"""Contexto:
Determina estimativas para par√¢metros populacionais e testa hip√≥teses com base em dados amostrais.

üìò F√≥rmulas:
Intervalo de Confian√ßa:
Exemplo pr√°tico:
Avaliar se a nova pol√≠tica de tr√°fego da CCR reduziu significativamente o tempo m√©dio de viagem."""


from scipy import stats
import numpy as np

amostra = np.array([12, 15, 14, 10, 13])
media = np.mean(amostra)
n = len(amostra)
sem = stats.sem(amostra)
conf_int = stats.t.interval(0.95, df=n-1, loc=media, scale=sem)

-------------------------------------------------
#8. Modelos de Markov

"""Contexto:
Modelos estoc√°sticos usados para prever sistemas que evoluem ao longo do tempo, onde o futuro depende apenas do estado atual.
üìò Equa√ß√£o de transi√ß√£o:
# Matriz de transi√ß√£o de estados do tr√¢nsito
üõ†Ô∏è Exemplo pr√°tico:
Prever o estado de tr√°fego (livre, moderado, congestionado) com base nos estados anteriores."""

import numpy as np

P = np.array([
    [0.7, 0.2, 0.1],  # estado livre
    [0.3, 0.4, 0.3],  # estado moderado
    [0.2, 0.3, 0.5]   # estado congestionado
])

estado_inicial = np.array([1, 0, 0])  # Come√ßa livre
estado_futuro = estado_inicial @ P @ P  # Ap√≥s 2 passos

